openapi: 3.0.0
servers:
  - url: https://todolist-api-348718.ew.r.appspot.com/api/v1
info:
  description: Crea tu propia lista de tareas para cualquier proyecto.
  version: 1.0.0
  title: TODOlist-API
  contact:
    email: laurolmer@us.es
tags:
  - name: Tasks
    description: Task's operations
  - name: User
    description: User's operations
  - name: Group
    description: Group's operations
  - name: GitHub User
    description: GitHub user's operations (Using the GitHub API)
  - name: Pokemon
    description: Pokemon operations (Using the Pokemon API)
paths:
  /tasks:
    get:
      tags:
        - Tasks
      summary: Get tasks
      description: Get all tasks
      operationId: getTasks
      parameters:
        - name: order
          in: query
          description: Order results by title, or then by the other attributes
          required: false
          schema:
            type: string
            enum:
              - title
              - '-title'
              - status
              - '-status'
              - startDate
              - '-startDate'
              - finishedDate
              - '-finishedDate'
              - priority
              - '-priority'
              - difficulty
              - '-difficulty'
              - duration
              - '-duration'
        - name: limit
          in: query
          description: Maximum number of results
          required: false
          schema:
            type: integer
            format: int32
            minimum: 0
        - name: offset
          in: query
          description: Offset of the results
          required: false
          schema:
            type: integer
            format: int32
            minimum: 0
        - name: fields
          in: query
          description: Attributes shown
          required: false
          schema:
            type: string
        - name: title
          in: query
          description: Title of a task
          required: false
          schema:
            type: string
        - name: status
          in: query
          description: Status of a task
          required: false
          schema:
            type: string
        - name: startDate
          in: query
          description: When the task started (you must add >, <, >=, <=, <> or = before the date)
          required: false
          schema:
            type: string
        - name: finishedDate
          in: query
          description: When the task finished (you must add >, <, >=, <=, <> or = before the date)
          required: false
          schema:
            type: string
        - name: priority
          in: query
          description: Priority of a task
          required: false
          schema:
            type: string
        - name: difficulty
          in: query
          description: Difficulty of a task
          required: false
          schema:
            type: string
        - name: duration
          in: query
          description: Duration of a task (you must add >, <, >=, <=, <> or = before the number)
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
        '400':
          description: Bad request
    post:
      tags:
        - Tasks
      summary: Create a task
      description: Create a task
      operationId: createTask
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
        description: Task to create
        required: true
      responses:
        '201':
          description: Task created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          description: Bad request
    put:
      tags:
        - Tasks
      summary: Update a Task
      description: Update a Task
      operationId: updateTask
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
        description: Task to update
      responses:
        '204':
          description: Task updated
        '400':
          description: Bad request
        '404':
          description: Task not found
  '/tasks/{taskId}':
    get:
      tags:
        - Tasks
      summary: Get task
      description: Get a task
      operationId: getTask
      parameters:
        - name: taskId
          in: path
          description: Id of the task
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Search results matching criteria
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Task'
        '400':
          description: Bad request
    delete:
      tags:
        - Tasks
      summary: Delete task
      description: Delete task
      operationId: deleteTask
      parameters:
        - name: taskId
          in: path
          description: Id of the task
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Task deleted
        '404':
          description: Task not found
  /users:
    get:
      tags:
        - User
      summary: Get users
      description: Get all users
      operationId: getUsers
      parameters:
        - name: order
          in: query
          description: Order results by user id, or then by the other attributes except avatar and bio
          required: false
          schema:
            type: string
            enum:
              - idUser
              - '-idUser'
              - name
              - '-name'
              - surname
              - '-surname'
              - email
              - '-email'
              - location
              - '-location'
              - taskCompleted
              - '-taskCompleted'
        - name: limit
          in: query
          description: Maximum number of results
          required: false
          schema:
            type: integer
            format: int32
            minimum: 0
        - name: offset
          in: query
          description: Offset of the results
          required: false
          schema:
            type: integer
            format: int32
            minimum: 0
        - name: fieldsUser
          in: query
          description: Attributes shown
          required: false
          schema:
            type: string
        - name: fieldsTask
          in: query
          description: Attributes of a task
          required: false
          schema:
            type: string
        - name: name
          in: query
          description: Name of a user
          required: false
          schema:
            type: string
        - name: surname
          in: query
          description: Surname of a user
          required: false
          schema:
            type: string
        - name: email
          in: query
          description: Email of a user
          required: false
          schema:
            type: string
        - name: location
          in: query
          description: Location of a user
          required: false
          schema:
            type: string
        - name: taskCompleted
          in: query
          description: How many tasks a user completed (you must add >, <, >=, <=, <> or = before the number)
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          description: Bad request
    put:
      tags:
        - User
      summary: Update a user
      description: Update a user
      operationId: updateUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: User to update
      responses:
        '204':
          description: User updated
        '400':
          description: Bad request
        '404':
          description: User not found
    post:
      tags:
        - User
      summary: Create an user
      description: Creates an user
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: User to create
        required: true
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
  '/users/{userId}':
    get:
      tags:
        - User
      summary: Get an user
      description: Gets an user
      operationId: getUser
      parameters:
        - name: userId
          in: path
          description: Id of the user
          required: true
          schema:
            type: string
        - name: fieldsUser
          in: query
          description: Attributes of a user
          required: false
          schema:
            type: string
        - name: fieldsTask
          in: query
          description: Attributes of a task
          required: false
          schema:
            type: string
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

        '404':
          description: User not found
    delete:
      tags:
        - User
      summary: Delete user
      description: Delete user
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          description: Id of the user
          required: true
          schema:
            type: string
      responses:
        '204':
          description: User deleted
        '404':
          description: User not found
  '/users/{userId}/{taskId}':
    post:
      tags:
        - User
      summary: Add a task to a user
      description: Add a task to a user
      operationId: addTaskToUser
      parameters:
        - name: userId
          in: path
          description: Id of the user
          required: true
          schema:
            type: string
        - name: taskId
          in: path
          description: Id of the task
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Task added to the user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
        '404':
          description: User or task not found
    delete:
      tags:
        - User
      summary: Delete task from user
      description: Delete task from user
      operationId: deleteTaskToUser
      parameters:
        - name: userId
          in: path
          description: Id of the user
          required: true
          schema:
            type: string
        - name: taskId
          in: path
          description: Id of the task
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Task deleted from user
        '404':
          description: User or task not found
  /groups:
    get:
      tags:
        - Group
      summary: Get groups
      description: Get all groups
      operationId: getGroups
      parameters:
        - name: order
          in: query
          description: Order results by group id, name, description or numTask
          required: false
          schema:
            type: string
            enum:
              - idGroup
              - '-idGroup'
              - name
              - '-name'
              - description
              - '-description'
              - numTask
              - '-numTask'
        - name: limit
          in: query
          description: Maximum number of results
          required: false
          schema:
            type: integer
            format: int32
            minimum: 0
        - name: offset
          in: query
          description: Offset of the results
          required: false
          schema:
            type: integer
            format: int32
            minimum: 0
        - name: fieldsGroup
          in: query
          description: Attributes shown
          required: false
          schema:
            type: string
        - name: fieldsUser
          in: query
          description: Attributes of a user
          required: false
          schema:
            type: string
        - name: fieldsTask
          in: query
          description: Attributes of a task
          required: false
          schema:
            type: string
        - name: name
          in: query
          description: Name of a user
          required: false
          schema:
            type: string
        - name: description
          in: query
          description: Description of a group
          required: false
          schema:
            type: string
        - name: numTasks
          in: query
          description: Number of tasks completed by a group
          required: false
          schema:
            type: string
        - name: createdDate
          in: query
          description: When a group was created
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'
        '400':
          description: Bad request
    post:
      tags:
        - Group
      summary: Add a group
      description: Adds a group
      operationId: addGroup
      requestBody:
        content:
          text/plain:
            schema:
              $ref: '#/components/schemas/Group'
      responses:
        '201':
          description: Group added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '400':
          description: Bad request
        '404':
          description: Group not found
    put:
      tags:
        - Group
      summary: Update a group
      description: Updates a group
      operationId: updateGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
        description: Group to update
      responses:
        '204':
          description: Group updated
        '400':
          description: Bad request
        '404':
          description: Group not found
  '/groups/{groupId}':
    get:
      tags:
        - Group
      summary: Get a Group
      description: Gets a Group
      operationId: getGroup
      parameters:
        - name: groupId
          in: path
          description: Id of the Group
          required: true
          schema:
            type: string
        - name: fieldsGroup
          in: query
          description: Attributes of a group
          required: false
          schema:
            type: string
        - name: fieldsUser
          in: query
          description: Attributes of a user
          required: false
          schema:
            type: string
        - name: fieldsTask
          in: query
          description: Attributes of a task
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Group found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'

        '404':
          description: Group not found
    delete:
      tags:
        - Group
      summary: Delete group
      description: Deletes a group
      operationId: deleteGroup
      parameters:
        - name: groupId
          in: path
          description: Id of the group
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Group deleted
        '404':
          description: Group not found
  '/groups/{groupId}/{userId}':
    post:
      tags:
        - Group
      summary: Add user to group
      description: Adds an user to a group
      operationId: addUserToGroup
      parameters:
        - name: groupId
          in: path
          description: Id of the group
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: Id of the user
          required: true
          schema:
            type: string
      responses:
        '201':
          description: User added to the group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '400':
          description: Bad request
        '404':
          description: Group or user not found
    delete:
      tags:
        - Group
      summary: Delete user from group
      description: Deletes an user from a group
      operationId: deleteUserToGroup
      parameters:
        - name: groupId
          in: path
          description: Id of the group
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: Id of the user
          required: true
          schema:
            type: string
      responses:
        '204':
          description: User deleted from the group
        '404':
          description: Group or user not found
  '/groups/{groupId}/{taskId}':
    post:
      tags:
        - Group
      summary: Add task to group
      description: Adds a task to a group(to its members)
      operationId: addTaskToGroup
      parameters:
        - name: groupId
          in: path
          description: Id of the group
          required: true
          schema:
            type: string
        - name: taskId
          in: path
          description: Id of the task
          required: true
          schema:
            type: string
      requestBody:
        content:
          text/plain:
            schema:
              $ref: '#/components/schemas/Task'
      responses:
        '201':
          description: Task added to the group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '400':
          description: Bad request
        '404':
          description: Group or task not found
    delete:
      tags:
        - Group
      summary: Delete task from group
      description: Deletes a task from a group(to its members)
      operationId: deleteTaskToGroup
      parameters:
        - name: groupId
          in: path
          description: Id of the group
          required: true
          schema:
            type: string
        - name: taskId
          in: path
          description: Id of the task
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Task deleted from the group
        '404':
          description: Group or task not found
  '/github/{account}':
    get:
      tags:
        - GitHub User
      summary: Get GitHub user
      description: Gets a GitHub user
      operationId: getGitHubUser
      parameters:
        - name: account
          in: path
          description: Name of the GitHub account
          required: true
          schema:
            type: string
      responses:
        '200':
          description: GitHub user found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: GitHub user not found
    post:
      tags:
        - GitHub User
      summary: Add GitHub user
      description: Adds a GitHub user
      operationId: addGitHubUser
      parameters:
        - name: account
          in: path
          description: Name of the GitHub account
          required: true
          schema:
            type: string
      responses:
        '201':
          description: GitHub user added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
        '404':
          description: GitHub user not found
  '/repos/{account}':
    get:
        tags:
          - GitHub User
        summary: Get all repositories from GitHub user 
        description: Gets all repositories from  a GitHub user 
        operationId: getAllRepos
        parameters:
          - name: account
            in: path
            description: Name of the GitHub account
            required: true
            schema:
              type: string
        responses:
          '200':
            description: GitHub user found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Task'
          '404':
            description: GitHub user not found
  '/github/{account}/{repo}':
    get:
      tags:
        - GitHub User
      summary: Get task from GitHub user
      description: Gets a task from a GitHub user
      operationId: getTaskGitHubUser
      parameters:
        - name: account
          in: path
          description: Name of a GitHub account
          required: true
          schema:
            type: string
        - name: repo
          in: path
          description: Name of a GitHub repository
          required: true
          schema:
            type: string
        - name: status
          in: query
          description: Status of a task
          required: false
          schema:
            type: string
        - name: finishedDate
          in: query
          description: When the task finished (after start date)
          required: false
          schema:
            type: string
        - name: priority
          in: query
          description: Priority of a task (between 0 and 5)
          required: false
          schema:
            type: string
        - name: difficulty
          in: query
          description: Difficulty of a task (it could be EASY, MEDIUM, HARD, HARDCORE and I WANT TO DIE)
          required: false
          schema:
            type: string
      responses:
        '200':
          description: GitHub user found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: GitHub user not found
    post:
      tags:
        - GitHub User
      summary: Add task to GitHub user
      description: Adds a task to a GitHub user
      operationId: addTaskGitHubUser
      parameters:
        - name: account
          in: path
          description: Name of a GitHub account
          required: true
          schema:
            type: string
        - name: repo
          in: path
          description: Name of a GitHub repository
          required: true
          schema:
            type: string
        - name: status
          in: query
          description: Status of a task
          required: false
          schema:
            type: string
        - name: finishedDate
          in: query
          description: When the task finished (after start date)
          required: false
          schema:
            type: string
        - name: priority
          in: query
          description: Priority of a task (between 0 and 5)
          required: false
          schema:
            type: string
        - name: difficulty
          in: query
          description: Difficulty of a task (it could be EASY, MEDIUM, HARD, HARDCORE and I WANT TO DIE)
          required: false
          schema:
            type: string
      responses:
        '201':
          description: Task added to the GitHub user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
        '404':
          description: GitHub user or task not found
  /pokemon:
    get:
      tags:
        - Pokemon
      summary: Get task from each Pokemon
      description: Gets a task from each Pokemon
      operationId: getTaskAllPokemon
      responses:
        '200':
          description: Pokemons found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '404':
          description: Pokemons not found
  '/pokemon/{name}':
    get:
      tags:
        - Pokemon
      summary: Get task from  Pokemon
      description: Gets a task from a Pokemon
      operationId: getTaskPokemon
      parameters:
        - name: name
          in: path
          description: Name of a Pokemon
          required: true
          schema:
            type: string
        - name: status
          in: query
          description: Status of a task
          required: false
          schema:
            type: string
        - name: finishedDate
          in: query
          description: When the task finished (after start date)
          required: false
          schema:
            type: string
        - name: priority
          in: query
          description: Priority of a task (between 0 and 5)
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Pokemon found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '404':
          description: Pokemon not found
    post:
      tags:
        - Pokemon
      summary: Add task from a pokemon
      description: Adds a task from a pokemon
      operationId: addTaskPokemon
      parameters:
        - name: name
          in: path
          description: Name of a Pokemon
          required: true
          schema:
            type: string
        - name: status
          in: query
          description: Status of a task
          required: false
          schema:
            type: string
        - name: finishedDate
          in: query
          description: When the task finished (after start date)
          required: false
          schema:
            type: string
        - name: priority
          in: query
          description: Priority of a task (between 0 and 5)
          required: false
          schema:
            type: string
      responses:
        '201':
          description: Task added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          description: Bad request
        '404':
          description: Pokemon not found

components:
  schemas:
    Task:
      type: object
      required:
        - title
      properties:
        idTask:
          description: Id of the task (is automatically generated)
          type: string
        title:
          description: Title of the task (it must be less than 50 characters)
          type: string
        description:
          description: Description of the task (it must be less than 200 characters)
          type: string
        status:
          description: Status of the task (it could be DRAFT, IN_PROGRESS, IN_REVISION, DONE, CANCELLED)
          type: string
        finishedDate:
          description: When the task finished (the following pattern should be used YYYY-MM-DD)
          type: string
        startDate:
          description: When the task started (the following pattern should be used YYYY-MM-DD)
          type: string
        annotation:
          description: Annotation of the task (it must be less than 50 characters)
          type: string
        priority:
          description: Priority of the task (between 0 and 5)
          type: integer
        difficulty:
          description: Difficulty of the task (it could be EASY, MEDIUM, HARD, HARDCORE and I WANT TO DIE)
          type: string
        duration:
          description: Duration of the task (it's calculated using the start and finish date)
          type: integer
      example:
        idTask: quitar si haces post o cambiarlo si haces put
        title: Comprar el pan
        description: Ve a comprar el pan para almorzar hoy
        status: DONE
        finishedDate: '2022-12-12'
        startDate: '2022-12-11'
        annotation: La panadería abre a las 9
        priority: '4'
        difficulty: EASY
    User:
      type: object
      required:
        - name
      properties:
        idUser:
          description: Id of the user (is automatically generated)
          type: string
        name:
          description: Name of the user (it must be less than 50 characters)
          type: string
        surname:
          description: Surname of the user (it must be less than 50 characters)
          type: string
        email:
          description: Email of the user (has a validation system, put a mail that makes sense)
          type: string
        avatar:
          description: Avatar of the user (has a validation system, put an URL that makes sense)
          type: string
        bio:
          description: Bio of the user (it must be less than 500 characters)
          type: string
        location:
          description: Location of the user (it must be less than 50 characters)
          type: string
        tasks:
          description: Tasks of the user
          type: array
          items:
            type: object
            required:
              - title
            properties:
              idTask:
                description: Id of the task (is automatically generated)
                type: string
              title:
                description: Title of the task (it must be less than 50 characters)
                type: string
              description:
                description: Description of the task (it must be less than 200 characters)
                type: string
              status:
                description: Status of the task (it could be DRAFT, IN_PROGRESS, IN_REVISION, DONE, CANCELLED)
                type: string
              finishedDate:
                description: When the task finished (the following pattern should be used YYYY-MM-DD)
                type: string
              startDate:
                description: When the task started (the following pattern should be used YYYY-MM-DD)
                type: string
              annotation:
                description: Annotation of the task (it must be less than 50 characters)
                type: string
              priority:
                description: Priority of the task (between 0 and 5)
                type: integer
              difficulty:
                description: Difficulty of the task (it could be EASY, MEDIUM, HARD, HARDCORE and I WANT TO DIE)
                type: string
              duration:
                description: Duration of the task (it's calculated using the start and finish date)
                type: integer
        taskCompleted:
          description: Number of tasks completed (no negatives numbers)
          type: integer
      example:
        idUser: quitar si haces post o cambiarlo si haces put
        name: Kujo
        surname: Jotaro
        email: oraora@gmail.com
        avatar: https://codigoesports.com/wp-content/uploads/2019/07/quien-es-belle-delphine.jpg
        bio: Yare yare daze
        location: Morioh
        tasks:
          - idTask: quitar si haces post o cambiarlo si haces put
            title: Derrotar a Dio
            description: Cruza todo el mundo hasta llegar a Egipto
            status: DONE
            finishedDate: '2023-10-08'
            startDate: '2022-05-08'
            annotation: Te encontrarás a un montón de randoms
            priority: '5'
            difficulty: HARDCORE
          - idTask: quitar si haces post o cambiarlo si haces put
            title: Parar a Kira
            description: Paren al psicópata explosivo
            status: DONE
            finishedDate: '2023-05-11'
            startDate: '2022-01-12'
            annotation: Cuidado con Bites the Dust
            priority: '5'
            difficulty: HARDCORE
    Group:
        type: object
        required:
          - name
        properties:
          idGroup:
            description: Id of the group (is automatically generated)
            type: string
          name:
            description: Name of the group (it must be less than 50 characters)
            type: string
          description:
            description: Description of the group (it must be less than 200 characters)
            type: string
          createdDate:
            description: When the group was created
            type: string
          users:
            description: Users that belong to the group
            type: array
            items:
              type: object
              required:
                - title
              properties:
                idUser:
                  description: Id of the user (is automatically generated)
                  type: string
                name:
                  description: Name of the user (it must be less than 50 characters)
                  type: string
                surname:
                  description: Surname of the user (it must be less than 50 characters)
                  type: string
                email:
                  description: Email of the user (has a validation system, put a mail that makes sense)
                  type: string
                avatar:
                  description: Avatar of the user (has a validation system, put an URL that makes sense)
                  type: string
                bio:
                  description: Bio of the user (it must be less than 500 characters)
                  type: string
                location:
                  description: Location of the user (it must be less than 50 characters)
                  type: string
                tasks:
                  description: Tasks of the user
                  type: array
                  items:
                    type: object
                    required:
                      - title
                    properties:
                      idTask:
                        description: Id of the task (is automatically generated)
                        type: string
                      title:
                        description: Title of the task (it must be less than 50 characters)
                        type: string
                      description:
                        description: Description of the task (it must be less than 200 characters)
                        type: string
                      status:
                        description: Status of the task (it could be DRAFT, IN_PROGRESS, IN_REVISION, DONE, CANCELLED)
                        type: string
                      finishedDate:
                        description: When the task finished (the following pattern should be used YYYY-MM-DD)
                        type: string
                      startDate:
                        description: When the task started (the following pattern should be used YYYY-MM-DD)
                        type: string
                      annotation:
                        description: Annotation of the task (it must be less than 50 characters)
                        type: string
                      priority:
                        description: Priority of the task (between 0 and 5)
                        type: integer
                      difficulty:
                        description: Difficulty of the task (it could be EASY, MEDIUM, HARD, HARDCORE and I WANT TO DIE)
                        type: string
                      duration:
                        description: Duration of the task (it's calculated using the start and finish date)
                        type: integer
                      taskCompleted:
                        description: If the task is completed (no negatives numbers)
                        type: integer
          numTasks:
            description: Number of tasks of the group (sum of the tasks of each user in the group)
            type: string
        example:
          idGroup: quitar si haces post o cambiarlo si haces put
          name: Kujos
          description: Familia Kujo
          createdDate: '2022-05-17'
          users:
            - idUser: quitar si haces post o cambiarlo si haces put
              name: Kujo
              surname: Jotaro
              email: oraora@gmail.com
              avatar: https://codigoesports.com/wp-content/uploads/2019/07/quien-es-belle-delphine.jpg
              bio: Yare yare daze
              location: Morioh
              tasks:
                - idTask: quitar si haces post o cambiarlo si haces put
                  title: Derrotar a Dio
                  description: Cruza todo el mundo hasta llegar a Egipto
                  status: DONE
                  finishedDate: '2023-10-08'
                  startDate: '2022-12-12'
                  annotation: Te encontrarás a un montón de randoms
                  priority: '5'
                  difficulty: HARDCORE
                - idTask: quitar si haces post o cambiarlo si haces put
                  title: Parar a Kira
                  description: Paren al psicópata explosivo
                  status: DONE
                  finishedDate: '2023-05-11'
                  startDate: '2022-12-12'
                  annotation: Cuidado con Bites the Dust
                  priority: '5'
                  difficulty: HARDCORE
            - idUser: quitar si haces post o cambiarlo si haces put
              name: Kujo
              surname: Jolyne
              email: oraorajunior@gmail.com
              avatar: https://oyster.ignimgs.com/wordpress/stg.ign.com/2021/04/EyIBaakU8AMs4Zh-720x1018.jpg
              bio: Yare yare dawa
              location: Prision
              tasks:
                - idTask: quitar si haces post o cambiarlo si haces put
                  title: Derrotar a Dio again
                  description: Resucito de la nada
                  status: IN_PROGRESS
                  finishedDate: '2023-10-08'
                  startDate: '2022-12-12'
                  annotation: 
                  priority: '5'
                  difficulty: HARDCORE
                - idTask: quitar si haces post o cambiarlo si haces put
                  title: Comprar el pan
                  description: Ve a comprar el pan para almorzar hoy
                  status: DONE
                  finishedDate: '2022-12-12'
                  startDate: '2022-12-11'
                  annotation: La panadería abre a las 9
                  priority: '3'
                  difficulty: EASY